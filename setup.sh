#!/bin/bash

# sfDBTools Setup Script
# This script helps configure sfDBTools after installation

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
BINARY_NAME="sfdbtools"
CONFIG_DIR="/etc/sfdbtools"
LOG_DIR="/var/log/sfdbtools"
USER_CONFIG_DIR="$HOME/.config/sfdbtools"
USER_LOG_DIR="$HOME/.local/share/sfdbtools/logs"

# Functions
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_step() {
    echo -e "${CYAN}[STEP]${NC} $1"
}

# Check if sfDBTools is installed
check_installation() {
    if ! command -v "$BINARY_NAME" >/dev/null 2>&1; then
        print_error "sfDBTools is not installed or not in PATH."
        print_info "Please run './install.sh' first to install sfDBTools."
        exit 1
    fi
    
    local version_output
    version_output=$("$BINARY_NAME" --version 2>/dev/null || echo "Version check failed")
    print_success "sfDBTools found: $version_output"
}

# Determine configuration paths
setup_paths() {
    if [[ $EUID -eq 0 ]]; then
        print_info "Running as root - using system-wide configuration"
        CONFIG_PATH="$CONFIG_DIR"
        LOG_PATH="$LOG_DIR"
    else
        print_info "Running as user - using user-specific configuration"
        CONFIG_PATH="$USER_CONFIG_DIR"
        LOG_PATH="$USER_LOG_DIR"
    fi
    
    # Create directories if they don't exist
    mkdir -p "$CONFIG_PATH"
    mkdir -p "$LOG_PATH"
}

# Check system requirements
check_requirements() {
    print_step "Checking system requirements..."
    
    local missing_tools=()
    
    # Check for required tools
    if ! command -v mysql >/dev/null 2>&1 && ! command -v mariadb >/dev/null 2>&1; then
        missing_tools+=("mysql/mariadb client")
    fi
    
    if ! command -v mysqldump >/dev/null 2>&1 && ! command -v mariadb-dump >/dev/null 2>&1; then
        missing_tools+=("mysqldump/mariadb-dump")
    fi
    
    if ! command -v systemctl >/dev/null 2>&1; then
        missing_tools+=("systemctl")
    fi
    
    if ! command -v rsync >/dev/null 2>&1; then
        missing_tools+=("rsync")
    fi
    
    if [[ ${#missing_tools[@]} -gt 0 ]]; then
        print_warning "Some optional tools are missing:"
        for tool in "${missing_tools[@]}"; do
            print_warning "  - $tool"
        done
        print_info "You can install these later if needed for specific features."
    else
        print_success "All system requirements are met."
    fi
}

# Generate initial configuration
generate_config() {
    print_step "Setting up configuration..."
    
    local config_file="$CONFIG_PATH/config.yaml"
    
    if [[ -f "$config_file" ]]; then
        print_warning "Configuration file already exists: $config_file"
        read -p "Do you want to overwrite it? (y/N): " -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "Keeping existing configuration."
            return
        fi
    fi
    
    # Use sfDBTools to generate configuration
    print_info "Generating configuration file..."
    
    if "$BINARY_NAME" config generate --output "$config_file" 2>/dev/null; then
        print_success "Configuration generated at: $config_file"
    else
        print_warning "Could not generate config automatically. Creating basic config..."
        
        # Create basic configuration
        cat > "$config_file" << EOF
# sfDBTools Configuration File
# Generated by setup script

general:
  client_code: "default"
  environment: "production"
  log_level: "info"
  
database:
  default_host: "localhost"
  default_port: 3306
  default_user: "root"
  backup_path: "/var/backups/sfdbtools"
  
backup:
  compression: true
  encryption: false
  retention_days: 30
  
logging:
  file_path: "$LOG_PATH/sfdbtools.log"
  max_size: 100
  max_backups: 5
  max_age: 30
EOF
        print_success "Basic configuration created at: $config_file"
    fi
}

# Setup MariaDB/MySQL configuration
setup_database_config() {
    print_step "Setting up database configuration..."
    
    # Check if MariaDB/MySQL is running
    if systemctl is-active --quiet mariadb || systemctl is-active --quiet mysql; then
        print_success "Database service is running."
        
        # Test database connection
        read -p "Enter database root password (press Enter if no password): " -rs db_password
        echo
        
        local mysql_cmd
        if command -v mariadb >/dev/null 2>&1; then
            mysql_cmd="mariadb"
        else
            mysql_cmd="mysql"
        fi
        
        if [[ -z "$db_password" ]]; then
            if $mysql_cmd -u root -e "SELECT 1;" >/dev/null 2>&1; then
                print_success "Database connection test successful."
            else
                print_warning "Could not connect to database. Please check your credentials."
            fi
        else
            if $mysql_cmd -u root -p"$db_password" -e "SELECT 1;" >/dev/null 2>&1; then
                print_success "Database connection test successful."
            else
                print_warning "Could not connect to database. Please check your credentials."
            fi
        fi
    else
        print_warning "Database service is not running."
        print_info "You can start it with:"
        print_info "  sudo systemctl start mariadb"
        print_info "  # or"
        print_info "  sudo systemctl start mysql"
    fi
}

# Test sfDBTools commands
test_commands() {
    print_step "Testing sfDBTools functionality..."
    
    # Test config validation
    if "$BINARY_NAME" config validate >/dev/null 2>&1; then
        print_success "Configuration validation passed."
    else
        print_warning "Configuration validation failed. Please check your config file."
    fi
    
    # Test MariaDB commands (if available)
    if "$BINARY_NAME" mariadb versions >/dev/null 2>&1; then
        print_success "MariaDB commands are working."
    else
        print_info "MariaDB commands not available (this is normal if MariaDB is not installed)."
    fi
}

# Create systemd service (optional)
create_service() {
    if [[ $EUID -ne 0 ]]; then
        print_info "Skipping systemd service creation (not running as root)."
        return
    fi
    
    print_step "Creating systemd service (optional)..."
    
    read -p "Do you want to create a systemd service for sfDBTools? (y/N): " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "Skipping systemd service creation."
        return
    fi
    
    local service_file="/etc/systemd/system/sfdbtools.service"
    
    cat > "$service_file" << EOF
[Unit]
Description=sfDBTools Database Management Service
After=network.target mariadb.service mysql.service
Wants=mariadb.service mysql.service

[Service]
Type=oneshot
User=root
ExecStart=/usr/local/bin/sfdbtools backup all
RemainAfterExit=no
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF
    
    # Create timer for regular backups
    local timer_file="/etc/systemd/system/sfdbtools.timer"
    
    cat > "$timer_file" << EOF
[Unit]
Description=Run sfDBTools backup daily
Requires=sfdbtools.service

[Timer]
OnCalendar=daily
Persistent=true

[Install]
WantedBy=timers.target
EOF
    
    systemctl daemon-reload
    print_success "Systemd service and timer created."
    print_info "To enable daily backups, run:"
    print_info "  sudo systemctl enable --now sfdbtools.timer"
}

# Display next steps
show_next_steps() {
    echo -e "${GREEN}"
    echo "=================================="
    echo "      Setup Complete!"
    echo "=================================="
    echo -e "${NC}"
    
    print_info "Configuration location: $CONFIG_PATH/config.yaml"
    print_info "Log location: $LOG_PATH/"
    
    echo -e "${CYAN}"
    echo "Next steps:"
    echo "1. Edit the configuration file to match your environment"
    echo "2. Test the installation with: sfdbtools --help"
    echo "3. Run a test backup: sfdbtools backup --help"
    echo "4. Check the documentation for more advanced usage"
    echo -e "${NC}"
    
    print_info "Common commands:"
    print_info "  sfdbtools config show          - Show current configuration"
    print_info "  sfdbtools config validate      - Validate configuration"
    print_info "  sfdbtools mariadb install      - Install MariaDB"
    print_info "  sfdbtools mariadb configure    - Configure MariaDB"
    print_info "  sfdbtools backup user <name>   - Backup user databases"
    print_info "  sfdbtools restore user <name>  - Restore user databases"
    
    if [[ $EUID -eq 0 ]]; then
        print_info ""
        print_info "System service commands:"
        print_info "  systemctl enable sfdbtools.timer  - Enable daily backups"
        print_info "  systemctl start sfdbtools.timer   - Start backup scheduler"
        print_info "  systemctl status sfdbtools.timer  - Check backup status"
    fi
}

# Main setup process
main() {
    echo -e "${BLUE}"
    echo "=================================="
    echo "      sfDBTools Setup"
    echo "=================================="
    echo -e "${NC}"
    
    check_installation
    setup_paths
    check_requirements
    generate_config
    setup_database_config
    test_commands
    create_service
    show_next_steps
}

# Run main function
main "$@"
